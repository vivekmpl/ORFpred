# A program to identify sequence features and write to arff file

from __future__ import division
import re, itertools, Bio, csv
from Bio import SeqIO
from Bio import SeqUtils

# ask the UTR lenght 

utr = 350 
dtr = 100 
utr_up = utr-int(raw_input("Number of upstream bases to concider for training/prediction"))
dtr_down = int(raw_input("Number of downstream bases to concider for training/prediction")) 
if dtr_down == dtr:
	dtr_down = None
else:
	dtr_down = dtr_down-dtr



# make list of combinations and append in it

combi = []
combi5prime = []
combi3prime = []

# combination of nucleotides


for i in range(1,utr - utr_up +1):
    combi5prime.append("5p%s"%i)

if dtr_down is not None:
        for i in  range(1,dtr_down+1):
                combi3prime.append("3p%s"%i)
else:
        for i in range(1,100+1):
                combi3prime.append("3p%s"%i)

combi = combi  +  combi5prime[::-1]+ combi3prime+["Base after ATG"] 

# defining seq features isolation procedure

def isf_predictor(seq):
    f = []
    for i in seq[utr_up:utr] : # 5 prime
        f.append(i)
    for i in seq[-dtr:dtr_down] :# 3 prime
            f.append(i)
    f.append(seq[utr+3])# Base after ATG
    return [str(i) for i in f]

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------
print "get_fet_pos_only_utr module ready"
# culminate everything
def get_fet_predictor(sequences):
	return isf_predictor(str(sequences.seq))
def give_names():
	return combi
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# end of the program .
